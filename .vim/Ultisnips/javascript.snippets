extends javascript

snippet class "ES6 Class" b
/**
 * @class ${1:Child}
 */
class $1 {
	/**
	 * @constructor
	 */
	constructor(${2:arguments}) {
		${0}
	}
}
endsnippet

snippet classex "ES6 Extended Class" b
/**
 * @class ${1:Child}
 * @extends ${2:Parent}
 */
class $1 extends $2 {
	/**
	 * @constructor
	 */
	constructor(${3:arguments}) {
		${4:super($3);}${0}
	}
}
endsnippet

snippet bel "Base Element" b
/**
 * # \`base-element\` Element
 *
 * The base element which all other custom elements extend. Enables the use of
 * class syntax when creating and extending elements as HTMLElement cannot be
 * directly subclassed in IE. Should not be used in markup.
 */

const ELEMENT_TAGNAME = 'base-element';

/**
 * @class BaseElement
 * @extends HTMLElement
 */
var BaseElementPrototype = Object.create(HTMLElement.prototype);

export default document.registerElement(ELEMENT_TAGNAME, {
	prototype: BaseElementPrototype
});
endsnippet

snippet el "Custom Element" b
/**
 * The \`${1}\` element definition.
 *
 *     <$1></$1>
 */

import BaseElement from '../base-element/element';

const ELEMENT_TAGNAME = '$1';

/**
 * @class ${1/-?\b(\w)/\u$1/g}Element
 * @extends BaseElement
 */
class ${1/-?\b(\w)/\u$1/g}Element extends BaseElement {
	/**
	 * @method createdCallback
	 */
	createdCallback() {
		${0}
	}

	/**
	 * @method attachedCallback
	 */
	attachedCallback() {
	}

	/**
	 * @method detachedCallback
	 */
	detachedCallback() {
	}

	/**
	 * @method attributeChangedCallback
	 * @param {String} name
	 * @param {String} oldValue
	 * @param {String} newValue
	 */
	attributeChangedCallback(name, oldValue, newValue) {
	}
}

export default document.registerElement(ELEMENT_TAGNAME, {
	prototype: ${1/-?\b(\w)/\u$1/g}Element.prototype
});
endsnippet

snippet forof "for...of loop"
for (let ${1:item} of ${2:items}) {
	${0}
}
endsnippet

snippet im "Import" b
import ${1:thing} from '${2:path}';
endsnippet

snippet jh "jshint" b
/*jshint ${1} */
endsnippet

snippet method "Method" b
/**
 * @method ${1:name}
 */
$1(${2:arguments}) {
	${3:super.$1($2);}${0}
}
endsnippet
