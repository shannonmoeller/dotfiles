extends javascript

snippet class "ES6 Class" b
/**
 * @class ${1:Child}
 */
class $1 {
	/**
	 * @constructor
	 */
	constructor(${2:arguments}) {
		$0
	}
}
endsnippet

snippet classex "ES6 Extended Class" b
/**
 * @class ${1:Child}
 * @extends ${2:Parent}
 */
class $1 extends $2 {
	/**
	 * @constructor
	 */
	constructor(${3:arguments}) {
		${4:super($3);}$0
	}
}
endsnippet

snippet bel "Base Element" b
/**
 * # Base \`$1-element\` Element
 *
 * The base element from which all other ${1/^(\w)(.*)$/\u$1$2/} elements are
 * extended. Enables the use of the class syntax when creating and extending
 * elements as the HTMLElement cannot be directly subclassed in IE.
 */

import 'document-register-element';

const ELEMENT_TAGNAME = '$1-element';

/**
 * @class ${1/^(\w)(.*)$/\u$1$2/}Element
 */
export default document.registerElement(ELEMENT_TAGNAME, {
	prototype: Object.create(HTMLElement.prototype)
});
endsnippet

snippet el "Custom Element" b
/**
 * # \`$1\` Element
 *
 *     <$1>
 *     </$1>
 */

import ${1/^(\w)([^-]*)-.*$/\u$1$2/}Element from '../${1/^([^-]+)-.*/$1/}-element/element';

const ELEMENT_TAGNAME = '$1';

/**
 * @class ${1/-?\b(\w)/\u$1/g}Element
 * @extends ${1/^(\w)([^-]*)-.*$/\u$1$2/}Element
 */
class ${1/-?\b(\w)/\u$1/g}Element extends ${1/^(\w)([^-]*)-.*$/\u$1$2/}Element {
	/**
	 * @method createdCallback
	 * @callback
	 */
	createdCallback() {
		$0
	}

	/**
	 * @method attachedCallback
	 * @callback
	 */
	attachedCallback() {
	}

	/**
	 * @method detachedCallback
	 * @callback
	 */
	detachedCallback() {
	}

	/**
	 * @method attributeChangedCallback
	 * @param {String} name
	 * @param {String} oldValue
	 * @param {String} newValue
	 * @callback
	 */
	attributeChangedCallback(name, oldValue, newValue) {
	}
}

export default document.registerElement(ELEMENT_TAGNAME, {
	prototype: ${1/-?\b(\w)/\u$1/g}Element.prototype
});
endsnippet

snippet forof "for...of loop"
for (let ${1:item} of ${2:items}) {
	$0
}
endsnippet

snippet im "Import" b
import ${1:thing} from '${2:path}';
endsnippet

snippet jh "jshint" b
/* jshint $1 */
endsnippet

snippet method "Method" b
/**
 * @method ${1:name}
 */
$1(${2:arguments}) {
	${3:super.$1($2);}$0
}
endsnippet

snippet property "Property" b
/**
 * @property ${1:name}
 */
this.$1 = $2;$0
endsnippet
